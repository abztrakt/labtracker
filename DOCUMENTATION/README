Labtracker:

Synopsis:
    Labtracker is an inventory tracking toolkit. The goal is to track item status through
    their history and be able to draw statisitcs from the change.

    Currently, the only items being tracked are computers, however, the final goal is to be
    able to define the items that you want to track.

    In addition, an Issue Tracking application is tied to Labtracker. This application
    allows users to file issues with specific items, groups, or item types. Issues can
    then be assigned to a registered user to be resolved.

Requirements:
    Labtracker is a project written in Python and django, and should run in any context that
    the django framework will work in (http://docs.djangoproject.com/en/1.1/howto/deployment/).

    - django >= 1.0
    - jQuery >= 1.1.4
    - simplejson 1.7.1 (?)

    - Python >= 2.5
    - apache 2.x
    - mysql >=  5.x 


Core Components:
    - LabtrackerCore
        - all core components of labtracker
    - IssueTracker
        - items related to issue tracking for items/groups/types
    - Machine (temporary, will be definable in the future)
        - This is an example of a specific item, IssueTracker will track items such as
        individual machines, groups of machines, or the entire Machine type.

=== Components ===

IssueTracker:
    Issue Creation:
        In the issue creation area, issues are given a title and description at minimum.
        Optional components that can be given issues are inventory types, item group, and specific item.


=== Constructing a InventoryType ===

1. In the application interface, create a new entry for InventoryTypes
2. Navigate to your application directory
3. Add the application to settings.py
4. Add some new models, at minimal, a model named Group and the namespace is needed.
5. Use manage.py to sync the db and add some entries.

Deleting
1. Remove the entry from the InventoryTypes admin interface (This also deletes the models from the db)
2. Delete the entry from settings.py
3. Remove the application folder
